<Application x:Class="FinanceTracker.App"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:local="clr-namespace:FinanceTracker"
			 xmlns:converters="clr-namespace:FinanceTracker.Converters"
			 StartupUri="MainWindow.xaml">
	<Application.Resources>

		<!--#region Converters-->

		<BooleanToVisibilityConverter x:Key="VisibleIfTrueConverter"/>
		<converters:VisibleIfFalseConverter x:Key="VisibleIfFalseConverter"/>
		<converters:SliderSeparationConverter x:Key="SliderSeparationConverter"/>
		<converters:SliderMaxValueConverter x:Key="SliderMaxValueConverter"/>
		<converters:SliderValueConverter x:Key="SliderUpperValueConverter"/>
		<converters:SliderValueConverter x:Key="SliderLowerValueConverter"/>
		<converters:MultiBoolAndConverter x:Key="MultiBoolAndConverter"/>
		<converters:MultiBoolOrConverter x:Key="MultiBoolOrConverter"/>
		<converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
		<converters:StringToWidthConverter x:Key="StringToWidthConverter"/>
		<converters:DateRangeConverter x:Key="DateRangeConverter"/>
		<converters:BooleanInverter x:Key="BoolInverter"/>
		<converters:VisibleIfOneTrueConverter x:Key="VisibleIfOneTrueConverter"/>
		<converters:EnumDescriptionConverter x:Key="EnumDescriptionConverter"/>
		<converters:ValueHalverConverter x:Key="ValueHalverConverter"/>
		<converters:ValueDoublerConverter x:Key="ValueDoublerConverter"/>
		<converters:ValueSubtract2Converter x:Key="ValueSubtract2Converter"/>
		<converters:RowWrapBoolConverter x:Key="RowWrapBoolConverter"/>
		<converters:PercentConverter x:Key="PercentConverter"/>
		<converters:IsNotNullConverter x:Key="IsNotNullConverter"/>
		<converters:VisibleIfSequenceHasElementsConverter x:Key="VisibleIfSequenceHasElementsConverter"/>

		<!--#endregion End Converters-->

		<!--#region Application colours-->

		<SolidColorBrush x:Key="MainBackgroundBrush" Color="White"/>
		<SolidColorBrush x:Key="DatagridHeaderBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="DatagridRowBrush" Color="White"/>
		<SolidColorBrush x:Key="MenuBarBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="MenuPopupBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="SliderThumbFillBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="SliderThumbOutlineBrush" Color="DarkGray"/>
		<SolidColorBrush x:Key="SliderInRangeFillBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="SliderInRangeOutlineBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="TextBrush" Color="Black"/>
		<Color x:Key="TextColour"/>
		<SolidColorBrush x:Key="StatusTextBrush" Color="Gray"/>
		<SolidColorBrush x:Key="StatusTextLightBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="InvertedTextBrush" Color="White"/>
		<SolidColorBrush x:Key="TabButtonBrush" Color="Transparent"/>
		<SolidColorBrush x:Key="TabButtonMouseOverBrush" Color="Gray"/>
		<SolidColorBrush x:Key="TabButtonClickBrush" Color="Gray"/>
		<SolidColorBrush x:Key="ThemeBrush" Color="#007acc"/>
		<SolidColorBrush x:Key="ThemeMouseOverBrush" Color="#2188cd"/>
		<SolidColorBrush x:Key="ThemeClickBrush" Color="#0069b0"/>
		<SolidColorBrush x:Key="ThemeBackgroundBrush" Color="#81acca"/>
		<SolidColorBrush x:Key="ThemeTextBrush" Color="White"/>
		<SolidColorBrush x:Key="ThemeDisabledTextBrush" Color="LightGray"/>
		<SolidColorBrush x:Key="ComboboxDisabledBackgroundBrush" Color="LightGray"/>

		<!--#endregion End Application colours-->

		<!--#region Slider thumb-->

		<ControlTemplate x:Key="SliderThumbHorizontalDefault" 
						 TargetType="{x:Type Thumb}">
			<Grid HorizontalAlignment="Center" 
				  UseLayoutRounding="True" 
				  VerticalAlignment="Center">
				<Path x:Name="grip" 
					  Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" 
					  Fill="{DynamicResource SliderThumbFillBrush}" 
					  Stretch="Fill" 
					  SnapsToDevicePixels="True" 
					  Stroke="{DynamicResource SliderThumbOutlineBrush}" 
					  StrokeThickness="1" 
					  UseLayoutRounding="True" 
					  VerticalAlignment="Center"/>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsMouseOver"
						 Value="true">
					<Setter Property="Fill" 
							TargetName="grip" 
							Value="{DynamicResource ThemeMouseOverBrush}"/>
					<Setter Property="Stroke" 
							TargetName="grip" 
							Value="{DynamicResource ThemeBrush}"/>
				</Trigger>
				<Trigger Property="IsDragging" 
						 Value="true">
					<Setter Property="Fill" 
							TargetName="grip" 
							Value="{DynamicResource ThemeClickBrush}"/>
					<Setter Property="Stroke" 
							TargetName="grip" 
							Value="{DynamicResource ThemeBrush}"/>
				</Trigger>
				<Trigger Property="IsEnabled" 
						 Value="false">
					<Setter Property="Fill" 
							TargetName="grip" 
							Value="#FFF0F0F0"/>
					<Setter Property="Stroke" 
							TargetName="grip" 
							Value="#FFD9D9D9"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<Style TargetType="{x:Type Thumb}" 
			   x:Key="ThumbStyle">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Rectangle Width="1" 
								   Stroke="Transparent" 
								   Cursor="SizeWE"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion End slider thumb-->

		<!--#region Theme Button-->

		<Style x:Key="ThemeButton" 
			   TargetType="{x:Type Button}">
			<Setter Property="Background" 
					Value="{DynamicResource ThemeBrush}"/>
			<Setter Property="Foreground"
					Value="{DynamicResource ThemeTextBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border CornerRadius="5" 
								Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" 
											  VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" 
						 Value="true">
					<Setter Property="Background" 
							Value="{DynamicResource ThemeMouseOverBrush}"/>
				</Trigger>
				<Trigger Property="IsPressed" 
						 Value="true">
					<Setter Property="Background"
							Value="{DynamicResource ThemeClickBrush}"/>
				</Trigger>
				<Trigger Property="IsEnabled" 
						 Value="false">
					<Setter Property="Background"
							Value="{DynamicResource DatagridHeaderBrush}"/>
					<Setter Property="Foreground"
							Value="{DynamicResource ThemeDisabledTextBrush}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--#endregion End Theme Button-->

		<!--#region Subtle Button-->

		<Style x:Key="SubtleButton" 
			   TargetType="{x:Type Button}">
			<Setter Property="Background" 
					Value="Transparent"/>
			<Setter Property="Foreground"
					Value="{DynamicResource TextBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border CornerRadius="5" 
								Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" 
											  VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" 
						 Value="true">
					<Setter Property="Background" 
							Value="{DynamicResource TabButtonMouseOverBrush}"/>
				</Trigger>
				<Trigger Property="IsPressed" 
						 Value="true">
					<Setter Property="Background"
							Value="{DynamicResource TabButtonClickBrush}"/>
				</Trigger>
				<Trigger Property="IsEnabled" 
						 Value="false">
					<Setter Property="Background"
							Value="{DynamicResource DatagridHeaderBrush}"/>
					<Setter Property="Foreground"
							Value="{DynamicResource ThemeDisabledTextBrush}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--#endregion End Subtle Button-->

		<!--#region Combobox-->

		<ControlTemplate x:Key="ComboBoxToggleButton" 
						 TargetType="ToggleButton">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition />
					<ColumnDefinition Width="20" />
				</Grid.ColumnDefinitions>
				<VisualStateManager.VisualStateGroups>
					<VisualStateGroup x:Name="CommonStates">
						<VisualState x:Name="Normal"/>
						<VisualState x:Name="MouseOver"/>
						<VisualState x:Name="Pressed"/>
						<VisualState x:Name="Disabled"/>
					</VisualStateGroup>
				</VisualStateManager.VisualStateGroups>
				<Border x:Name="Border" 
						SnapsToDevicePixels="True" 
						CornerRadius="5" 
						Grid.ColumnSpan="2" 
						BorderBrush="#abadb3" 
						BorderThickness="1,1,1,1" 
						Background="{DynamicResource StatusTextLightBrush}"/>
				<Border x:Name="Border2" 
						Grid.Column="0" 
						CornerRadius="5" 
						SnapsToDevicePixels="True" 
						Margin="1" 
						BorderThickness="{TemplateBinding BorderThickness}" 
						Background="{DynamicResource InvertedTextBrush}" 
						BorderBrush="Red" />
				<Path x:Name="Arrow" 
					  Grid.Column="1" 
					  Data="M 0 0 L 4 4 L 8 0 Z" 
					  Fill="{DynamicResource StatusTextBrush}" 
					  HorizontalAlignment="Center" 
					  VerticalAlignment="Center" />
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="ToggleButton.IsMouseOver" 
						 Value="true">
					<Setter Property="Background"
							TargetName="Border"
							Value="{DynamicResource ThemeMouseOverBrush}" />
					<Setter Property="BorderBrush"
							TargetName="Border"
							Value="{DynamicResource ThemeMouseOverBrush}" />
					<Setter Property="BorderBrush" 
							TargetName="Border2" 
							Value="{DynamicResource ThemeMouseOverBrush}" />
					<Setter Property="Fill"
							TargetName="Arrow"
							Value="{DynamicResource InvertedTextBrush}" />
				</Trigger>
				<Trigger Property="ToggleButton.IsChecked" 
						 Value="true">
					<Setter Property="Background" 
							TargetName="Border" 
							Value="{DynamicResource ThemeClickBrush}" />
					<Setter Property="BorderBrush" 
							TargetName="Border" 
							Value="{DynamicResource ThemeClickBrush}" />
					<Setter Property="BorderBrush" 
							TargetName="Border2" 
							Value="{DynamicResource ThemeClickBrush}" />
					<Setter Property="Fill" 
							TargetName="Arrow" 
							Value="White" />
				</Trigger>
				<Trigger Property="IsEnabled" 
						 Value="False">
					<Setter Property="Background" 
							TargetName="Border" 
							Value="{DynamicResource StatusTextLightBrush}" />
					<Setter Property="Foreground" 
							Value="Gray" />
					<Setter Property="Background" 
							TargetName="Border2" 
							Value="{DynamicResource ComboboxDisabledBackgroundBrush}" />
					<Setter Property="Fill" 
							TargetName="Arrow" 
							Value="{DynamicResource DatagridHeaderBrush}" />
				</Trigger>
				<DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" Value="True">
					<Setter Property="Background" 
							TargetName="Border" 
							Value="{DynamicResource ThemeClickBrush}" />
					<Setter Property="BorderBrush" 
							TargetName="Border" 
							Value="{DynamicResource ThemeClickBrush}" />
					<Setter Property="BorderBrush" 
							TargetName="Border2" 
							Value="{DynamicResource ThemeClickBrush}" />
					<Setter Property="Fill" 
							TargetName="Arrow" 
							Value="White" />
				</DataTrigger >
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<ControlTemplate x:Key="ComboBoxTextBox" 
						 TargetType="TextBox">
			<Border x:Name="PART_ContentHost" 
					Background="Transparent" Focusable="False"/>
		</ControlTemplate>

		<Style TargetType="{x:Type ComboBox}">
			<Setter Property="Validation.ErrorTemplate" 
					Value="{x:Null}" />
			<Setter Property="VerticalAlignment" 
					Value="Center" />
			<Setter Property="OverridesDefaultStyle"
					Value="true" />
			<Setter Property="IsEditable" 
					Value="True"/>
			<Setter Property="SnapsToDevicePixels"
					Value="true" />
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
					Value="Auto" />
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
					Value="Auto" />
			<Setter Property="ScrollViewer.CanContentScroll"
					Value="true" />
			<Setter Property="Margin" 
					Value="2" />
			<Setter Property="MinHeight"
					Value="20" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ComboBox">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<ToggleButton x:Name="ToggleButton" 
										  Grid.Column="2" 
										  ClickMode="Press" 
										  Focusable="false"
										  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										  Template="{StaticResource ComboBoxToggleButton}" BorderThickness="{TemplateBinding BorderThickness}"/>

							<ContentPresenter Margin="3,3,23,3" 
											  Content="{TemplateBinding SelectionBoxItem}"
											  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
											  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
											  HorizontalAlignment="Left" 
											  IsHitTestVisible="False" 
											  x:Name="ContentSite"
											  VerticalAlignment="Center" />

							<TextBox Style="{x:Null}" 
									 x:Name="PART_EditableTextBox" 
									 Margin="3,3,23,3" 
									 Background="Transparent" 
									 Foreground="{DynamicResource TextBrush}"
									 Focusable="True" 
									 HorizontalAlignment="Left" 
									 IsReadOnly="{TemplateBinding IsReadOnly}"
									 Template="{StaticResource ComboBoxTextBox}" 
									 VerticalAlignment="Center" 
									 Visibility="Hidden" />

							<Popup AllowsTransparency="True" 
								   Focusable="False" 
								   IsOpen="{TemplateBinding IsDropDownOpen}" 
								   x:Name="Popup" 
								   Placement="Bottom" 
								   PopupAnimation="Fade">
								<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" 
									  MinWidth="{TemplateBinding ActualWidth}" 
									  x:Name="DropDown" 
									  SnapsToDevicePixels="True">
									<Border x:Name="DropDownBorder" 
											Background="{DynamicResource MenuPopupBrush}" 
											BorderBrush="{DynamicResource SliderThumbOutlineBrush}" 
											BorderThickness="1" 
											CornerRadius="5" />
									<ScrollViewer Foreground="{DynamicResource TextBrush}" 
												  Margin="2" 
												  SnapsToDevicePixels="True">
										<StackPanel KeyboardNavigation.DirectionalNavigation="Contained" 
													IsItemsHost="True" 
													TextBlock.Foreground="{DynamicResource TextBrush}" />
									</ScrollViewer>
								</Grid>
							</Popup>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="HasItems" 
									 Value="false">
								<Setter Property="MinHeight" 
										TargetName="DropDownBorder" 
										Value="95" />
							</Trigger>
							<Trigger Property="IsGrouping" 
									 Value="true">
								<Setter Property="ScrollViewer.CanContentScroll" 
										Value="false" />
							</Trigger>
							<Trigger Property="IsEditable" 
									 Value="true">
								<Setter Property="IsTabStop" 
										Value="false" />
								<Setter Property="Visibility" 
										TargetName="PART_EditableTextBox" 
										Value="Visible" />
								<Setter Property="Visibility" 
										TargetName="ContentSite" 
										Value="Hidden" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion End Combobox-->

		<!--#region ScrollBar-->

		<Style x:Key="ScrollThumbs" 
			   TargetType="{x:Type Thumb}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Grid x:Name="Grid">
							<Rectangle HorizontalAlignment="Stretch" 
									   VerticalAlignment="Stretch"
									   Width="Auto" 
									   Height="Auto" 
									   Fill="Transparent" />
							<Border x:Name="Rectangle1" 
									CornerRadius="3" 
									HorizontalAlignment="Stretch" 
									VerticalAlignment="Stretch" 
									Width="Auto" 
									Height="Auto" 
									Background="{TemplateBinding Background}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="Tag" 
									 Value="Horizontal">
								<Setter TargetName="Rectangle1" 
										Property="Width" 
										Value="Auto" />
								<Setter TargetName="Rectangle1" 
										Property="Height" 
										Value="12" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style TargetType="{x:Type ScrollBar}">
			<Setter Property="Stylus.IsFlicksEnabled" 
					Value="false" />
			<Setter Property="Foreground" 
					Value="#8C8C8C" />
			<Setter Property="Background" 
					Value="Transparent" />
			<Setter Property="Width" 
					Value="12" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollBar}">
						<Grid x:Name="GridRoot" 
							  Width="12" 
							  Background="{TemplateBinding Background}">
							<Grid.RowDefinitions>
								<RowDefinition 
									Height="0.00001*" />
							</Grid.RowDefinitions>

							<Track x:Name="PART_Track" 
								   Grid.Row="0" 
								   IsDirectionReversed="true" 
								   Focusable="false">
								<Track.Thumb>
									<Thumb x:Name="Thumb" 
										   Background="{TemplateBinding Foreground}" 
										   Style="{DynamicResource ScrollThumbs}" />
								</Track.Thumb>
								<Track.IncreaseRepeatButton>
									<RepeatButton x:Name="PageUp" 
												  Command="ScrollBar.PageDownCommand" 
												  Opacity="0" 
												  Focusable="false" />
								</Track.IncreaseRepeatButton>
								<Track.DecreaseRepeatButton>
									<RepeatButton x:Name="PageDown" 
												  Command="ScrollBar.PageUpCommand" 
												  Opacity="0" 
												  Focusable="false" />
								</Track.DecreaseRepeatButton>
							</Track>
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger SourceName="Thumb" 
									 Property="IsMouseOver" 
									 Value="true">
								<Setter Value="{DynamicResource ThemeMouseOverBrush}" 
										TargetName="Thumb" 
										Property="Background" />
							</Trigger>
							<Trigger SourceName="Thumb" 
									 Property="IsDragging" 
									 Value="true">
								<Setter Value="{DynamicResource ThemeMouseDownBrush}" 
										TargetName="Thumb" 
										Property="Background" />
							</Trigger>

							<Trigger Property="IsEnabled" 
									 Value="false">
								<Setter TargetName="Thumb" 
										Property="Visibility"
										Value="Collapsed" />
							</Trigger>
							<Trigger Property="Orientation" 
									 Value="Horizontal">
								<Setter TargetName="GridRoot" 
										Property="LayoutTransform">
									<Setter.Value>
										<RotateTransform Angle="-90" />
									</Setter.Value>
								</Setter>
								<Setter TargetName="PART_Track" 
										Property="LayoutTransform">
									<Setter.Value>
										<RotateTransform Angle="-90" />
									</Setter.Value>
								</Setter>
								<Setter Property="Width" 
										Value="Auto" />
								<Setter Property="Height" 
										Value="12" />
								<Setter TargetName="Thumb" 
										Property="Tag" 
										Value="Horizontal" />
								<Setter TargetName="PageDown" 
										Property="Command" 
										Value="ScrollBar.PageLeftCommand" />
								<Setter TargetName="PageUp" 
										Property="Command" 
										Value="ScrollBar.PageRightCommand" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- #endregion End ScrollBar-->

		<!--#region Custom Menu Item-->

		<Style x:Key="CustomMenu" TargetType="{x:Type Menu}">
			<Setter Property="OverridesDefaultStyle" 
					Value="True"/>
			<Setter Property="SnapsToDevicePixels" 
					Value="True"/>
			<Setter Property="Height" 
					Value="25"/>
			<Setter Property="Foreground" 
					Value="{DynamicResource TextBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Menu}">
						<Border Background="{TemplateBinding Background}" 
								BorderBrush="{TemplateBinding Background}" 
								BorderThickness="1">
							<StackPanel ClipToBounds="True" 
										Orientation="Horizontal"
										IsItemsHost="True"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="CustomMenuItem" 
			   TargetType="{x:Type MenuItem}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type MenuItem}">
						<Border CornerRadius="3" 
								x:Name="Border" 
								Background="{DynamicResource MenuBarBrush}" 
								BorderBrush="{DynamicResource MenuBarBrush}" 
								BorderThickness="0">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition x:Name="Col0" 
													  MinWidth="17" 
													  Width="Auto" 
													  SharedSizeGroup="MenuItemIconColumnGroup"/>
									<ColumnDefinition Width="Auto" 
													  SharedSizeGroup="MenuTextColumnGroup"/>
									<ColumnDefinition Width="Auto" 
													  SharedSizeGroup="MenuItemIGTColumnGroup"/>
									<ColumnDefinition x:Name="Col3" 
													  Width="14"/>
								</Grid.ColumnDefinitions>

								<!-- ContentPresenter to show an Icon if needed -->
								<ContentPresenter Grid.Column="0" 
												  Margin="4,0,6,0" 
												  x:Name="Icon" 
												  VerticalAlignment="Center" 
												  ContentSource="Icon"/>

								<!-- Glyph is a checkmark if needed for a checkable menu -->
								<Grid Grid.Column="0" 
									  Visibility="Hidden" 
									  Margin="4,0,6,0" 
									  x:Name="GlyphPanel" 
									  VerticalAlignment="Center">
									<Path x:Name="GlyphPanelpath" 
										  VerticalAlignment="Center" 
										  Fill="{DynamicResource TextBrush}" 
										  Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" 
										  FlowDirection="LeftToRight"/>
								</Grid>

								<!-- Content for the menu text etc -->
								<ContentPresenter Grid.Column="1" 
												  Margin="{TemplateBinding Padding}" 
												  VerticalAlignment="Center" 
												  x:Name="HeaderHost" 
												  RecognizesAccessKey="True" 
												  ContentSource="Header"/>

								<!-- Content for the menu IGT -->
								<ContentPresenter Grid.Column="2" 
												  Margin="8,1,8,1" 
												  x:Name="IGTHost" 
												  ContentSource="InputGestureText" 
												  VerticalAlignment="Center"/>

								<!-- Arrow drawn path which points to the next level of the menu -->
								<Grid Grid.Column="3" 
									  Margin="4,0,6,0" 
									  x:Name="ArrowPanel" 
									  VerticalAlignment="Center">
									<Path x:Name="ArrowPanelPath" 
										  HorizontalAlignment="Right" 
										  VerticalAlignment="Center" 
										  Fill="{DynamicResource TextBrush}" 
										  Data="M0,0 L0,8 L4,4 z"/>
								</Grid>

								<!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
								<Popup AllowsTransparency="True" 
									   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
									   Placement="Right" 
									   x:Name="SubMenuPopup" 
									   Focusable="false" 
									   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
									<Border x:Name="SubMenuBorder" 
											CornerRadius="5" 
											Background="{DynamicResource MenuPopupBrush}"
											BorderBrush="{DynamicResource MenuBarBrush}" 
											BorderThickness="1" 
											Padding="2,0,2,2">
										<ScrollViewer MaxHeight="500" 
													  VerticalScrollBarVisibility="Auto">
											<Grid x:Name="SubMenu" 
												  Grid.IsSharedSizeScope="True">
												<!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
												<StackPanel IsItemsHost="True" 
															KeyboardNavigation.DirectionalNavigation="Cycle"/>
											</Grid>
										</ScrollViewer>
									</Border>
								</Popup>
							</Grid>
						</Border>

						<!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
						<ControlTemplate.Triggers>
							<!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
							<Trigger Property="Role" 
									 Value="TopLevelHeader">
								<Setter Property="Padding" 
										Value="6,1,6,1"/>
								<Setter Property="Placement" 
										Value="Bottom" 
										TargetName="SubMenuPopup"/>
								<Setter Property="MinWidth" 
										Value="0" 
										TargetName="Col0"/>
								<Setter Property="Width" 
										Value="Auto" 
										TargetName="Col3"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="Icon"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="GlyphPanel"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="IGTHost"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="ArrowPanel"/>
							</Trigger>

							<!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
							<Trigger Property="Role" 
									 Value="TopLevelItem">
								<Setter Property="Padding" 
										Value="6,1,6,1"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="ArrowPanel"/>
							</Trigger>

							<!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
							<Trigger Property="Role" 
									 Value="SubmenuHeader">
								<Setter Property="DockPanel.Dock" 
										Value="Top"/>
								<Setter Property="Padding" 
										Value="0,2,0,2"/>
							</Trigger>

							<!-- Role = SubMenuItem : this is a child menu item which has children-->
							<Trigger Property="Role" 
									 Value="SubmenuItem">
								<Setter Property="DockPanel.Dock" 
										Value="Top"/>
								<Setter Property="Padding" 
										Value="0,2,0,2"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="ArrowPanel"/>
							</Trigger>
							<Trigger Property="IsSuspendingPopupAnimation" 
									 Value="true">
								<Setter Property="PopupAnimation" 
										Value="None" 
										TargetName="SubMenuPopup"/>
							</Trigger>

							<!-- If no Icon is present the we collapse the Icon Content -->
							<Trigger Property="Icon" 
									 Value="{x:Null}">
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="Icon"/>
							</Trigger>

							<!-- The GlyphPanel contains the CheckMark -->
							<Trigger Property="IsChecked" 
									 Value="true">
								<Setter Property="Visibility" 
										Value="Visible" 
										TargetName="GlyphPanel"/>
								<Setter Property="Visibility" 
										Value="Collapsed" 
										TargetName="Icon"/>
							</Trigger>

							<!-- Using the system colors for the Menu Highlight and IsEnabled-->
							<Trigger Property="IsHighlighted" 
									 Value="true">
								<Setter Property="Background" 
										Value="{DynamicResource ThemeBrush}" 
										TargetName="Border"/>
								<Setter Property="Foreground" 
										Value="{DynamicResource ThemeTextBrush}"/>
								<Setter Property="BorderBrush" 
										Value="{DynamicResource ThemeClickBrush}" 
										TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsHighlighted" 
									 Value="false">
								<Setter Property="Background" 
										Value="Transparent" 
										TargetName="Border"/>
								<Setter Property="Foreground" 
										Value="{DynamicResource TextBrush}"/>
								<Setter Property="BorderBrush" 
										Value="Transparent" 
										TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsEnabled" 
									 Value="false">
								<Setter Property="Foreground" 
										Value="Gray"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion End Customisable Menu Item-->

		<!--#region Custom datagrid column header-->

		<Style TargetType="{x:Type DataGridColumnHeader}" 
			   x:Key="{x:Type DataGridColumnHeader}">
			<Setter Property="SnapsToDevicePixels" 
					Value="True"/>
			<Setter Property="MinWidth"
					Value="0"/>
			<Setter Property="MinHeight" 
					Value="0"/>
			<Setter Property="Background" 
					Value="{DynamicResource DatagridHeaderBrush}"/>
			<Setter Property="Cursor" 
					Value="Hand"/>
			<Setter Property="Padding" 
					Value="5"/>
			<Setter Property="BorderThickness"
					Value="0 0 1 0"/>
			<Setter Property="BorderBrush" 
					Value="DarkGray"/>
			<Setter Property="HorizontalContentAlignment"
					Value="Left" />
			<Setter Property="TextBlock.TextAlignment"
					Value="Center" />
			<Setter Property="FontWeight" 
					Value="DemiBold"/>
			<Setter Property="FontSize" 
					Value="14"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="DataGridColumnHeader">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Border x:Name="BackgroundBorder" 
									BorderThickness="0,0,0,2" 
									Background="{DynamicResource DatagridHeaderBrush}" 
									BorderBrush="{TemplateBinding BorderBrush}" 
									Grid.ColumnSpan="2"/>
							<ContentPresenter Margin="5" 
											  VerticalAlignment="Center" 
											  HorizontalAlignment="Left"/>
							<Path x:Name="SortArrow" 
								  Visibility="Collapsed" 
								  Data="M 0,0 L 1,0 0.5,1 z" 
								  Stretch="Fill" 
								  Grid.Column="1" 
								  Width="8" 
								  Height="6" 
								  Fill="{DynamicResource TextBrush}" 
								  Margin="0,0,8,0"  
								  VerticalAlignment="Center" 
								  RenderTransformOrigin="0.5, 0.4"/>
							<Rectangle Width="1" 
									   Margin="0,3,0,4" 
									   Fill="DarkGray" 
									   HorizontalAlignment="Right" 
									   Grid.ColumnSpan="2"/>
							<Thumb x:Name="PART_LeftHeaderGripper"
								   HorizontalAlignment="Left" 
								   Style="{StaticResource ThumbStyle}"/>
							<Thumb x:Name="PART_RightHeaderGripper" 
								   Grid.Column="1" 
								   HorizontalAlignment="Right" 
								   Style="{StaticResource ThumbStyle}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" 
									 Value="true">
								<Setter TargetName="BackgroundBorder" 
										Property="Background" 
										Value="{DynamicResource ThemeMouseOverBrush}"/>
								<Setter TargetName="SortArrow" 
										Property="Fill" 
										Value="{DynamicResource ThemeTextBrush}"/>
								<Setter Property="Foreground" 
										Value="{DynamicResource ThemeTextBrush}"/>
							</Trigger>
							<Trigger Property="SortDirection" 
									 Value="Ascending">
								<Setter TargetName="SortArrow" 
										Property="Visibility" 
										Value="Visible"/>
								<Setter TargetName="SortArrow" 
										Property="RenderTransform">
									<Setter.Value>
										<RotateTransform Angle="180"/>
									</Setter.Value>
								</Setter>
							</Trigger>
							<Trigger Property="SortDirection" 
									 Value="Descending">
								<Setter TargetName="SortArrow" 
										Property="Visibility"
										Value="Visible"/>
							</Trigger>
							<Trigger Property="DisplayIndex" 
									 Value="0">
								<Setter TargetName="PART_LeftHeaderGripper" 
										Property="Visibility" 
										Value="Collapsed"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion Custom datagrid-->

		<!--#region Custom Combobox Item-->

		<Style TargetType="ComboBoxItem">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ComboBoxItem">
						<Border x:Name="Bd" 
								CornerRadius="5" 
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="0" 
								Background="Transparent"
								Padding="1" 
								SnapsToDevicePixels="true">
							<ContentPresenter/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" 
									 Value="True">
								<Setter Property="Background" 
										Value="{DynamicResource DatagridHeaderBrush}"
										TargetName="Bd"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion Custom Combobox Item-->

		<!--#region Custom ListBox-->

		<Style x:Key="CustomListbox" 
			   TargetType="{x:Type ListBox}">
			<Setter Property="Background" 
					Value="Black"/>
			<Setter Property="BorderBrush" 
					Value="Black"/>
			<Setter Property="BorderThickness" 
					Value="1"/>
			<Setter Property="Foreground"
					Value="White"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" 
					Value="Auto"/>
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
					Value="Auto"/>
			<Setter Property="ScrollViewer.CanContentScroll" 
					Value="true"/>
			<Setter Property="ScrollViewer.PanningMode"
					Value="Both"/>
			<Setter Property="Stylus.IsFlicksEnabled" 
					Value="False"/>
			<Setter Property="VerticalContentAlignment" 
					Value="Center"/>
			<Setter Property="ItemContainerStyle">
				<Setter.Value>
					<Style TargetType="ListBoxItem">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="ListBoxItem">
									<ContentPresenter/>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</Setter.Value>
			</Setter>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBox}">
						<Border x:Name="Bd" 
								CornerRadius="5" 
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="{TemplateBinding BorderThickness}" 
								Background="{TemplateBinding Background}" 
								Padding="1" 
								SnapsToDevicePixels="true">
							<ScrollViewer Focusable="false" 
										  Padding="{TemplateBinding Padding}">
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" 
									 Value="false">
								<Setter Property="Background" 
										TargetName="Bd" 
										Value="{DynamicResource DatagridHeaderBrush}"/>
								<Setter Property="BorderBrush" 
										TargetName="Bd" 
										Value="{DynamicResource DatagridHeaderBrush}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsGrouping" 
											   Value="true"/>
									<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" 
											   Value="false"/>
								</MultiTrigger.Conditions>
								<Setter Property="ScrollViewer.CanContentScroll" 
										Value="false"/>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion End Custom ListBox-->

		<!--#region Custom Checkbox-->

		<Style TargetType="CheckBox">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CheckBox}">
						<Border CornerRadius="4" 
								x:Name="Border" 
								Background="Transparent" 
								BorderBrush="{DynamicResource MenuBarBrush}" BorderThickness="0">
							<Grid x:Name="grid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="16"/>
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Border CornerRadius="3" 
										BorderBrush="{DynamicResource StatusTextBrush}" 
										BorderThickness="1" 
										Margin="1" 
										x:Name="highlightCircle" 
										Height="14" 
										VerticalAlignment="Top" 
										Background="Transparent">
									<Grid Height="16" 
										  Visibility="Hidden"
										  Margin="2,2,2,0" 
										  x:Name="GlyphPanel" 
										  VerticalAlignment="Top">
										<Path x:Name="GlyphPanelPath" VerticalAlignment="Top"
											  Fill="{DynamicResource ThemeTextBrush}"
											  Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" 
											  FlowDirection="LeftToRight"/>
									</Grid>
								</Border>
								<ContentPresenter 
									Margin="5, 0, 0, 0" 
									Grid.Column="1"
									x:Name="content" 
									HorizontalAlignment="Left" 
									VerticalAlignment="Top"/>

							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<!--The GlyphPanel contains the CheckMark-->
							<Trigger Property="IsChecked"
									 Value="True">
								<Setter Property="Visibility" 
										Value="Visible" 
										TargetName="GlyphPanel"/>
							</Trigger>
							<Trigger Property="IsChecked" 
									 Value="True">
								<Setter Property="Background" 
										Value="{DynamicResource ThemeBrush}"
										TargetName="highlightCircle"/>
							</Trigger>
							<Trigger Property="IsMouseOver" 
									 Value="True">
								<Setter Property="Background" 
										Value="{DynamicResource MenuBarBrush}" 
										TargetName="highlightCircle"/>
								<Setter Property="Background" 
										Value="{DynamicResource DatagridHeaderBrush}" 
										TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsEnabled" 
									 Value="False">
								<Setter Property="Background" 
										Value="{DynamicResource DatagridHeaderBrush}" 
										TargetName="highlightCircle"/>
								<Setter Property="BorderBrush" 
										Value="{DynamicResource MenuBarBrush}" 
										TargetName="highlightCircle"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsChecked"
											   Value="True"/>
									<Condition Property="IsMouseOver"
											   Value="True"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter Property="Background"
											Value="{DynamicResource ThemeClickBrush}" 
											TargetName="highlightCircle"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion End Custom Checkbox-->

		<!--#region Toggle Checkbox-->

		<Style x:Key="ToggleCheckbox" 
			   TargetType="CheckBox">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CheckBox}">
						<Border Height="{TemplateBinding Height}" 
								Width="{Binding Height, ElementName=Border, Converter={StaticResource ValueDoublerConverter}}" 
								CornerRadius="{Binding Path=Height, ElementName=Border, Converter={StaticResource ValueHalverConverter}}" 
								x:Name="Border" 
								Background="{DynamicResource MenuBarBrush}" 
								BorderThickness="0">
							<Grid x:Name="grid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="1*"/>
									<ColumnDefinition Width="1*" />
								</Grid.ColumnDefinitions>
								<Border Height="{Binding Height, ElementName=Border, Converter={StaticResource ValueSubtract2Converter}}" 
										CornerRadius="{Binding Path=Height, ElementName=Border, Converter={StaticResource ValueHalverConverter}}" 
										BorderThickness="0" 
										Margin="1" 
										x:Name="highlightCircle" 
										VerticalAlignment="Top" 
										Background="{DynamicResource StatusTextBrush}">
								</Border>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" 
									 Value="True">
								<Setter Property="Background" 
										Value="{DynamicResource ThemeBrush}"
										TargetName="Border"/>
								<Setter Property="Background" 
										Value="{DynamicResource MenuBarBrush}" 
										TargetName="highlightCircle"/>
								<Setter Property="Grid.Column" 
										Value="1" 
										TargetName="highlightCircle"/>
							</Trigger>
							<Trigger Property="IsMouseOver" 
									 Value="True">
								<Setter Property="Background" 
										Value="{DynamicResource ThemeMouseOverBrush}" 
										TargetName="highlightCircle"/>
							</Trigger>
							<Trigger Property="IsEnabled" 
									 Value="False">
								<Setter Property="Background" 
										Value="{DynamicResource MenuBarBrush}" 
										TargetName="highlightCircle"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsChecked" 
											   Value="True"/>
									<Condition Property="IsMouseOver" 
											   Value="True"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter Property="Background" 
											Value="{DynamicResource DatagridHeaderBrush}" 
											TargetName="highlightCircle"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsChecked" 
											   Value="True"/>
									<Condition Property="IsEnabled" 
											   Value="False"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter Property="Background" 
											Value="{DynamicResource ThemeBackgroundBrush}" 
											TargetName="Border"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--#endregion End Custom Checkbox-->

	</Application.Resources>
</Application>
